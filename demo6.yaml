apiVersion: v1
kind: Namespace
metadata:
  name: demo4
  labels:
    linkerd.io/inject: enabled
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: menu
  namespace: demo4
spec:
  replicas: 1
  selector:
    matchLabels:
      app: menu
  template:
    metadata:
      labels:
        app: menu
    spec:
      containers:
      - name: menu
        image: node:18-alpine
        command: ["node", "-e"]
        args:
          - |
            const http = require('http');
            const port = 8080;
            http.createServer((req,res)=>{
              res.end("🍔 Menu: Burger, Fries, Cola\n");
            }).listen(port, ()=>console.log("Menu service on "+port));
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: menu
  namespace: demo4
spec:
  selector:
    app: menu
  ports:
  - port: 8080
    targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orders
  namespace: demo4
spec:
  replicas: 1
  selector:
    matchLabels:
      app: orders
  template:
    metadata:
      labels:
        app: orders
    spec:
      containers:
      - name: orders
        image: node:18-alpine
        command: ["node", "-e"]
        args:
          - |
            const http = require('http');
            const port = 8080;
            http.createServer((req,res)=>{
              res.end("🛒 Order placed!\n");
            }).listen(port, ()=>console.log("Orders service on "+port));
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: orders
  namespace: demo4
spec:
  selector:
    app: orders
  ports:
  - port: 8080
    targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: payment
  namespace: demo4
spec:
  replicas: 1
  selector:
    matchLabels:
      app: payment
  template:
    metadata:
      labels:
        app: payment
    spec:
      containers:
      - name: payment
        image: node:18-alpine
        command: ["node", "-e"]
        args:
          - |
            const http = require('http');
            const port = 8080;
            http.createServer((req,res)=>{
              res.end("💳 Payment successful!\n");
            }).listen(port, ()=>console.log("Payment service on "+port));
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: payment
  namespace: demo4
spec:
  selector:
    app: payment
  ports:
  - port: 8080
    targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: reviews
  namespace: demo4
spec:
  replicas: 1
  selector:
    matchLabels:
      app: reviews
  template:
    metadata:
      labels:
        app: reviews
    spec:
      containers:
      - name: reviews
        image: node:18-alpine
        command: ["node", "-e"]
        args:
          - |
            const http = require('http');
            const port = 8080;
            http.createServer((req,res)=>{
              res.end("⭐ Reviews: 5 stars!\n");
            }).listen(port, ()=>console.log("Reviews service on "+port));
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: reviews
  namespace: demo4
spec:
  selector:
    app: reviews
  ports:
  - port: 8080
    targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: demo4
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: frontend
        image: node:18-alpine
        command: ["node", "-e"]
        args:
          - |
            const http = require('http');
            const {request} = require('http');
            const port = 8080;
            const services = ["menu","orders","payment","reviews"];
            http.createServer((req,res)=>{
              let results = [];
              let pending = services.length;
              services.forEach(svc=>{
                const options = {host: svc, port: 8080, path: '/'};
                const r = request(options, rs=>{
                  let data='';
                  rs.on('data',chunk=>data+=chunk);
                  rs.on('end',()=>{
                    results.push(`${svc}: ${data}`);
                    if(--pending===0){
                      res.end("Frontend says:\n\n"+results.join("\n"));
                    }
                  });
                });
                r.on('error', err=>{
                  results.push(`${svc}: ERROR ${err.message}`);
                  if(--pending===0){
                    res.end("Frontend says:\n\n"+results.join("\n"));
                  }
                });
                r.end();
              });
            }).listen(port, ()=>console.log("Frontend service on "+port));
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: demo4
spec:
  selector:
    app: frontend
  ports:
  - port: 8080
    targetPort: 8080
